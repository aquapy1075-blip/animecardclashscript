local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TextChatService = game:GetService("TextChatService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
@@ -18,7 +19,6 @@ local function PlayInfernoSound()
    sound.Looped = false
    sound.Parent = workspace
    sound:Play()

    task.delay(15, function()
        if sound and sound.IsPlaying then sound:Stop() end
        if sound then sound:Destroy() end
@@ -57,7 +57,7 @@ local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 34)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(40,40,40)
title.Text = "  üåô Moon Tracker"
title.Text = "  Moon Tracker"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.GothamBold
title.TextSize = 18
@@ -92,7 +92,7 @@ local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 200, 0, 28)
toggleBtn.Position = UDim2.new(0, 120, 1, -36)
toggleBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
toggleBtn.Text = "Discord: ALL üåç"
toggleBtn.Text = "Discord: ALL"
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 14
toggleBtn.TextColor3 = Color3.fromRGB(255,255,255)
@@ -117,14 +117,22 @@ local infernoOnly = false
local lastProcessedMoon = nil
local lastSendTime = 0

-- H√†m lo·∫°i b·ªè HTML / tag Roblox
local function cleanText(text)
    if not text then return "" end
    local t = text:gsub("<[^>]+>", "")
    t = t:gsub("^%s+", ""):gsub("%s+$", "")
    return t
end

-- Toggle, Clear handlers
toggleBtn.MouseButton1Click:Connect(function()
    infernoOnly = not infernoOnly
    if infernoOnly then
        toggleBtn.Text = "Discord: INFERNO üî•"
        toggleBtn.Text = "Discord: INFERNO"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(120,40,40)
    else
        toggleBtn.Text = "Discord: ALL üåç"
        toggleBtn.Text = "Discord: ALL"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
    end
end)
@@ -197,23 +205,30 @@ local function AddLog(text, color)
    logFrame.CanvasPosition = Vector2.new(0, math.max(0, uiList.AbsoluteContentSize.Y - logFrame.AbsoluteSize.Y))
end

-- G·ª≠i Discord embed v·ªõi emoji th·∫≠t (ch·ªâ exploit h·ªó tr·ª£ UTF-8)
-- G·ª≠i Discord embed (text ƒë√£ clean)
local function SendDiscord(moonDisplay, colorDec, rawText)
    local now = os.time()
    if now - lastSendTime < SEND_COOLDOWN then return end
    lastSendTime = now

    local embedJson = ('{"embeds":[{"title":"üåô Moon Cycle Alert","description":"**%s**\\n%s","color":%d,"timestamp":"%s"}]}')
        :format(moonDisplay, rawText or "", colorDec or 16777215, os.date("!%Y-%m-%dT%H:%M:%SZ"))

    if syn and syn.request then
    local payload = HttpService:JSONEncode({
        embeds = {{
            title = "Moon Cycle Alert",
            description = ("**%s**\n%s"):format(moonDisplay, rawText or ""),
            color = colorDec or 0xFFFFFF,
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    })

    local req = request or http_request or (syn and syn.request)
    if req then
        task.spawn(function()
            pcall(function()
                syn.request({
                req({
                    Url = WEBHOOK_URL,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json; charset=utf-8" },
                    Body = embedJson
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = payload
                })
            end)
        end)
@@ -223,19 +238,15 @@ end
-- Detect moon t·ª´ chat
local function detectMoonFromText(text)
    if not text or text == "" then return nil end
    local clean = text:gsub("<[^>]+>", ""):gsub("^%s+", ""):gsub("%s+$", "")
    local lower = clean:lower()

    local clean = cleanText(text):lower()
    for k, v in pairs(moonConfigs) do
        if lower:find(k) then
        if clean:find(k) then
            return k, v.display or k, v.color
        end
    end

    if lower:find("ended") or lower:find("has ended") then
    if clean:find("ended") or clean:find("has ended") then
        return "none", "No Moon", 0x888888
    end

    return nil
end

@@ -249,21 +260,22 @@ end)

if channel then
    channel.MessageReceived:Connect(function(msg)
        local raw = (msg.Text or "")
        local raw = msg.Text or ""
        local key, displayName, colorDec = detectMoonFromText(raw)
        if not key then return end
        if key == lastProcessedMoon then return end
        lastProcessedMoon = key

        local rawClean = cleanText(raw)
        AddLog(os.date("[%H:%M:%S] ") .. displayName, Color3.fromRGB(200,200,200))

        if infernoOnly then
            if key == "inferno moon" then
                SendDiscord(displayName, colorDec, raw)
                SendDiscord(displayName, colorDec, rawClean)
                PlayInfernoSound()
            end
        else
            SendDiscord(displayName, colorDec, raw)
            SendDiscord(displayName, colorDec, rawClean)
            if key == "inferno moon" then PlayInfernoSound() end
        end
    end)
@@ -272,4 +284,3 @@ else
end

print("MoonTracker loaded. Toggle UI = H, Toggle Discord mode = n√∫t trong UI")
